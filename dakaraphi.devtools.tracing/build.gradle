/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'chadmeadows' at '7/26/16 6:35 PM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.21'  // not sure why this was needed previously
    implementation 'org.javassist:javassist:3.18.2-GA'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testImplementation 'junit:junit:4.12'

}

// Adds the tracer.json file to the build output for the test class
sourceSets {
    other {
        resources {
            srcDirs "src/test/java"
            includes = ["**/*.json"]
        }
    }
    test {
        resources {
            source other.resources
        }
    }
}

jar {
  manifest {
    attributes(
        "Premain-Class": "dakaraphi.devtools.tracing.TracingAgent",
        "Agent-Class": "dakaraphi.devtools.tracing.TracingAgent",
        "Can-Redefine-Classes": "true",
        "Can-Retransform-Classes": "true",
        "Boot-Class-Path": 'dakaraphi.devtools.tracing-all.jar')
  }
}

shadowJar {
    classifier = 'all'
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    // move all vendor packages to prevent any possible version collisions with application libraries
    relocate('com.fasterxml', 'dakaraphi.vendor.com.fasterxml')
    relocate('org.slf4j',     'dakaraphi.vendor.org.slf4j')
    relocate('javassist',     'dakaraphi.vendor.javassist')
}

// -javaagent: dakaraphi.devtools.tracing.jar
task runWithExecJarExecutable(type: Exec) {
    dependsOn jar
    group = "Execution"
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-javaagent", jar.archiveFile.get()
}

task testApplication(type: JavaExec) {
    dependsOn shadowJar 
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = ["-javaagent:build\\libs\\dakaraphi.devtools.tracing-all.jar"]
    main = "dakaraphi.devtools.TestApplication"
    systemProperty "dakaraphi.devtools.tracing.config.file", "src\\test\\java\\dakaraphi\\devtools\\tracing\\config\\tracer.json"
}

task getDeps(type: Copy) {
    from configurations.runtimeOnly
    into 'runtime/'
}
